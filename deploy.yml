# Deploy Laravel Application to VPS Server
name: Deploy Laravel to Server

on:
  push:
    # add git branch to trigger deployment (e.g., main)
    branches: [main]

jobs:
  # define the job
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # define the steps for the job
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up PHP environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
          extensions: mbstring, xml, ctype, json, bcmath, pdo, mysql
          coverage: none

      # Cache Composer dependencies
      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      # Cache and install dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      # Install NPM dependencies and build assets
      - name: Install NPM dependencies
        run: npm ci

      # Build NPM assets
      - name: Build NPM assets
        run: npm run build

      # Prepare deployment directory on the server
      - name: Prepare deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d /var/www/html ]; then
              mkdir -p /var/www/html
            fi
            cd /var/www/html
            sudo chown -R ${{ secrets.VPS_USER }}:www-data .
            sudo chmod -R 775 .

      # Sync files to the server
      - name: Sync files to server
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: .
          REMOTE_HOST: ${{ secrets.VPS_HOST }}
          REMOTE_USER: ${{ secrets.VPS_USER }}
          EXCLUDE: "/node_modules/, /.git/, /storage/, /bootstrap/cache/"
        with:
          target: "/var/www/html"
          args: "-rltgoDzvO --delete"

      # Run deployment commands on the server
      - name: Run deployment commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/html

            if [ ! -f .env ]; then
              cp .env.example .env
              sed -i 's/APP_ENV=.*/APP_ENV=production/' .env
              sed -i 's|APP_URL=.*|APP_URL=${{ secrets.APP_URL }}|' .env
              sed -i 's/DB_HOST=.*/DB_HOST=localhost/' .env
              sed -i 's/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/' .env
              sed -i 's/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/' .env
              sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/' .env
              php artisan key:generate --force
            fi

            mkdir -p storage/framework/{sessions,views,cache}
            mkdir -p storage/logs
            mkdir -p bootstrap/cache

            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan optimize

            php artisan storage:link || true

            sudo chown -R www-data:www-data storage bootstrap/cache public/build public/storage
            sudo chmod -R 775 storage bootstrap/cache public/build public/storage

            sudo systemctl reload nginx

      - name: Deployment complete
        run: echo "Deployment completed successfully!"
